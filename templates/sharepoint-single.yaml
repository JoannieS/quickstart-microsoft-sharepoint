AWSTemplateFormatVersion: '2010-09-09'
Description: >
  QS(0023) - This template deploys a SharePoint 2016 traditional topology
  farm with two Web Front-End servers and two Application servers or a streamlined
  topology farm with two Web Front End servers, two Application servers, two
  Distributed Cache Server, and two Search servers. This template is intended to be
  installed into an existing VPC that was built using the sample reference architecture
  titled "Implementing Active Directory Domain Services in the AWS Cloud" **WARNING**
  This template creates Amazon EC2 Windows instance and related resources. You will be
  billed for the AWS resources used if you create a stack from this template.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - SubnetID
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - SPServerInstanceType
          - WS2019FULLBASE
          - SPServerNetBIOSName
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - ADAdminSecretArn
          - ADMemberSecurityGroup
      - Label:
          default: Microsoft SharePoint Configuration
        Parameters:
          - SPBinaryBucket
          - SPBinaryKey
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3KeyPrefix
    ParameterLabels:
      WS2019FULLBASE:
        default: SSM Parameter to grab the latest AMI ID
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      SPServerInstanceType:
        default: SharePoint Server Instance Type
      SubnetID:
        default: ID of the subnet
      SPServerNetBIOSName:
        default: SharePoint Server NetBIOS Name
      KeyPairName:
        default: Key Pair Name
      VPCCIDR:
        default: VPC CIDR
      DomainDNSName:
        default: Domain DNS Name
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      ADAdminSecretArn:
        default: ARN of a secret that has domain admin credentials
      ADMemberSecurityGroup:
        default: Name of the security group that allows domain members to join the domain
      SPBinaryBucket:
        default: The name of the bucket that contains your SharePoint binaries
      SPBinaryKey:
        default: The path (key) to the installer zip file in the S3 bucket

Parameters:
  WS2019FULLBASE:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-windows-latest/Windows_Server-2019-English-Full-Base'
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-microsoft-sharepoint/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  SPServerInstanceType:
    AllowedValues:
      - t2.xlarge
      - t2.2xlarge
      - t3.xlarge
      - t3.2xlarge
      - m4.xlarge
      - m4.2xlarge
      - m5.xlarge
      - m5.2xlarge
    Default: m4.xlarge
    Description: Amazon EC2 instance type for the SharePoint Server
    Type: String
  SubnetID:
    Description: ID of subnet SharePoint will be deployed in
    Type: AWS::EC2::Subnet::Id
  SPServerNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: SP1
    Description: NetBIOS name of the first Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance after it launches
    Type: AWS::EC2::KeyPair::KeyName
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/16
    Description: CIDR Block for the VPC
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9\-]+\..+'
    Default: example.com
    Description: Fully qualified domain name (FQDN) of the domain to join (such as example.com)
    MaxLength: '255'
    MinLength: '2'
    Type: String
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9\-]+'
    Default: example
    Description: NetBIOS name of the domain to join e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADAdminSecretArn:
    Default: arn:aws:secretsmanager:ap-southeast-2:709944787479:secret:ADDomainJoinCredential-SjOiGd
    Description: The name of the secret in Secrets Manager that has the username and password that will allow domain joining
    MaxLength: '255'
    MinLength: '2'
    Type: String
  ADMemberSecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Default: sg-0b7cdabe65060f65e
  SPBinaryBucket:
    Type: String
    MinLength: 2
    MaxLength: 255
    Default: brfarn-release-staging
  SPBinaryKey:
    Type: String
    MinLength: 2
    MaxLength: 255
    Default: SP/SP2019.zip

Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll 'AWS::EC2::VPC::Id'
        AssertDescription: All subnets must in the VPC
  CheckSupportedInstances:
    RuleCondition: !Or
      - !Contains
        - - m4.xlarge
          - m4.2xlarge
        - !Ref 'SPServerInstanceType'
      - !Contains
        - - m4.xlarge
          - m4.2xlarge
        - !Ref 'SPServerInstanceType'
    Assertions:
      - Assert: !Not
          - !Contains
            - - eu-west-3
            - !Ref 'AWS::Region'
        AssertDescription: M4 instances are not available in the Paris region

Conditions:
  GovCloudCondition: !Equals
    - !Ref 'AWS::Region'
    - us-gov-west-1

Resources:

  DSCBucket:
    Type: AWS::S3::Bucket
    Properties:
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            ExpirationInDays: 30
            Status: Enabled
            Prefix: 'logs/'

  SharePointServerRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource:
                  - !Ref ADAdminSecretArn
                  - !Ref SPSetupAccount
                  - !Ref SPFarmAccount
                  - !Ref SPWebAppAccount
                  - !Ref SPSvcAppAccount
                  - !Ref SPCrawlAccount
                  - !Ref SPUPSyncAccount
                  - !Ref SPSuperUserAccount
                  - !Ref SPReaderAccount
                  - !Ref SPPassPhrase
              - Effect: Allow
                Action:
                  - ec2:DescribeTags
                  - ec2:DescribeInstances
                Resource: '*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${SPBinaryBucket}/${SPBinaryKey}"
          PolicyName: aws-quickstart-SPServer
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM'
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'

  SharePointServerProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'SharePointServerRole'
      Path: /

  SharePointServerWaitConditionHanle:
    Type: AWS::CloudFormation::WaitConditionHandle

  # SharePointServerWaitCondition:
  #   Type: AWS::CloudFormation::WaitCondition
  #   DependsOn:
  #     - SharePointServer
  #   Properties:
  #     Handle: !Ref SharePointServerWaitConditionHanle
  #     Timeout: 5400 # 90 minutes

  SharePointServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref 'WS2019FULLBASE'
      IamInstanceProfile: !Ref 'SharePointServerProfile'
      InstanceType: !Ref 'SPServerInstanceType'
      SubnetId: !Ref 'SubnetID'
      Tags:
        - Key: Name
          Value: !Ref 'SPServerNetBIOSName'
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: '80'
            VolumeType: gp2
        - DeviceName: /dev/xvdd
          Ebs:
            VolumeSize: '100'
            VolumeType: gp2
      SecurityGroupIds:
        - !Ref SharePointSG
        - !Ref ADMemberSecurityGroup
      KeyName: !Ref 'KeyPairName'
      UserData:
        Fn::Base64: !Sub |
          <script>
          cfn-init.exe -v -c config -s ${AWS::StackId} -r SharePointServer --region ${AWS::Region}
          </script>
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: !Ref SharePointServerRole
      AWS::CloudFormation::Init:
        configSets:
          config:
            - setup
            - downloadBinaries
        setup:
          files:
            "c:\\cfn\\cfn-hup.conf":
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
            "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.SharePointServer.Metadata.AWS::CloudFormation::Init
                action=cfn-init.exe -v -c config -s ${AWS::StackId} -r SharePointServer --region ${AWS::Region}
          services:
            windows:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - "c:\\cfn\\cfn-hup.conf"
                  - "c:\\cfn\\hooks.d\\cfn-auto-reloader.conf"
          commands:
            1-create-reg-key:
              command: powershell.exe -command New-Item -Path HKLM:\SOFTWARE\Amazon\ -Name QuickStart -ErrorAction Continue
            2-set-wait-url:
              command: !Sub powershell.exe -command "Set-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -Name SignalUrl -Value '${SharePointServerWaitConditionHanle}' -ErrorAction Continue"
        downloadBinaries:
          files:
            "C:\\config\\sources\\installer.zip":
              source: !Sub https://${SPBinaryBucket}.s3-${AWS::Region}.amazonaws.com/${SPBinaryKey}
              authentication: S3AccessCreds

  SharePointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SharePoint Server Security Group (for Single Server deployments only)
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VPCCIDR
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref VPCCIDR

  WriteMOFRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: WriteMOFRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:putObject
              Resource:
                - !Sub "${DSCBucket.Arn}"
                - !Sub "${DSCBucket.Arn}/*"

  WriteMOFFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          var AWS = require('aws-sdk'), s3 = new AWS.S3();
          const response = require("cfn-response");

          exports.handler = async (event, context) => {
            console.log(JSON.stringify(event));

            if (event.RequestType === 'Delete') {
                await postResponse(event, context, response.SUCCESS, {})
                return;
            }

            function postResponse(event, context, status, data){
                return new Promise((resolve, reject) => {
                    setTimeout(() => response.send(event, context, status, data), 5000)
                });
            }

            await s3.putObject({
              Body: event.ResourceProperties.Body,
              Bucket: event.ResourceProperties.Bucket,
              Key: event.ResourceProperties.Key
            }).promise();
            await postResponse(event, context, response.SUCCESS, {});
          };
      Handler: index.handler
      Role: !GetAtt WriteMOFRole.Arn
      Runtime: nodejs8.10
      Timeout: 10

  WriteSingleServerMOF:
    Type: Custom::WriteMOFFile
    Properties:
      ServiceToken: !GetAtt WriteMOFFunction.Arn
      Bucket: !Ref DSCBucket
      Key: !Sub "SP-Single-${AWS::StackName}.mof"
      Body: !Sub |
        instance of MSFT_EnvironmentResource as $MSFT_EnvironmentResource1ref
        {
        ResourceID = "[Environment]VersionStamp";
        Value = "2.0.0";
        Name = "QuickStartVersion";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource1ref
        {
        ResourceID = "[Script]WaitForBinaries";
        GetScript = " return @{} ";
        TestScript = "\n                return (Get-Item C:\\config\\sources\\installer.zip -ErrorAction SilentlyContinue).Length -ne 0\n            ";
        SetScript = "\n                $count = 0\n                while ((Get-Item C:\\config\\sources\\installer.zip -ErrorAction SilentlyContinue).Length -eq 0 -and $count -lt 10) {\n                    $count++\n                    Start-Sleep -Seconds 30\n                }\n            ";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential1ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_Computer as $MSFT_Computer1ref
        {
        ResourceID = "[Computer]DomainJoin";
        Credential = $MSFT_Credential1ref;
        DomainName = "${DomainDNSName}";
        Name = "{tag:Name}";
        ModuleName = "ComputerManagementDsc";
        ModuleVersion = "6.2.0.0";
        DependsOn = {
            "[Script]WaitForBinaries"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFTDSC_Disk as $MSFTDSC_Disk1ref
        {
        ResourceID = "[Disk]SecondaryDisk";
        PartitionStyle = "MBR";
        DiskId = "1";
        FSFormat = "NTFS";
        DriveLetter = "D";
        ModuleName = "StorageDsc";
        ModuleVersion = "4.6.0.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ArchiveResource as $MSFT_ArchiveResource1ref
        {
        ResourceID = "[Archive]UnzipSpInstaller";
        Path = "C:\\config\\sources\\installer.zip";
        Ensure = "Present";
        Destination = "D:\\binaries";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        DependsOn = {
            "[Disk]SecondaryDisk"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xCredSSP as $MSFT_xCredSSP1ref
        {
        ResourceID = "[xCredSSP]CredSSPServer";
        Role = "Server";
        Ensure = "Present";
        ModuleName = "xCredSSP";
        ModuleVersion = "1.0.1";
        DependsOn = {
            "[Computer]DomainJoin"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_xCredSSP as $MSFT_xCredSSP2ref
        {
        ResourceID = "[xCredSSP]CredSSPClient";
        Role = "Client";
        Ensure = "Present";
        ModuleName = "xCredSSP";
        ModuleVersion = "1.0.1";
        DelegateComputers = {
            "*.${DomainDNSName}"
        };
        DependsOn = {
            "[Computer]DomainJoin"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource1ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-ADDS";
        Ensure = "Present";
        Name = "RSAT-ADDS";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource2ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-AD-AdminCenter";
        Ensure = "Present";
        Name = "RSAT-AD-AdminCenter";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource3ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-ADDS-Tools";
        Ensure = "Present";
        Name = "RSAT-ADDS-Tools";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_RoleResource as $MSFT_RoleResource4ref
        {
        ResourceID = "[WindowsFeature]Feature-RSAT-AD-PowerShell";
        Ensure = "Present";
        Name = "RSAT-AD-PowerShell";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential2ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPWebAppAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential3ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser1ref
        {
        ResourceID = "[xADUser]User-svcSPWebApp";
        UserName = "svcSPWebApp";
        Ensure = "Present";
        Password = $MSFT_Credential2ref;
        DomainAdministratorCredential = $MSFT_Credential3ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential4ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPReaderAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential5ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser2ref
        {
        ResourceID = "[xADUser]User-svcSPUPSync";
        UserName = "svcSPUPSync";
        Ensure = "Present";
        Password = $MSFT_Credential4ref;
        DomainAdministratorCredential = $MSFT_Credential5ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential6ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPWebAppAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential7ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser3ref
        {
        ResourceID = "[xADUser]User-svcSPReader";
        UserName = "svcSPReader";
        Ensure = "Present";
        Password = $MSFT_Credential6ref;
        DomainAdministratorCredential = $MSFT_Credential7ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential8ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPSvcAppAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential9ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser4ref
        {
        ResourceID = "[xADUser]User-svcSPSvcApp";
        UserName = "svcSPSvcApp";
        Ensure = "Present";
        Password = $MSFT_Credential8ref;
        DomainAdministratorCredential = $MSFT_Credential9ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential10ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPSuperUserAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential11ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser5ref
        {
        ResourceID = "[xADUser]User-svcSPSuperUser";
        UserName = "svcSPSuperUser";
        Ensure = "Present";
        Password = $MSFT_Credential10ref;
        DomainAdministratorCredential = $MSFT_Credential11ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential12ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPCrawlAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential13ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser6ref
        {
        ResourceID = "[xADUser]User-svcSPCrawl";
        UserName = "svcSPCrawl";
        Ensure = "Present";
        Password = $MSFT_Credential12ref;
        DomainAdministratorCredential = $MSFT_Credential13ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential14ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPSetupAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential15ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser7ref
        {
        ResourceID = "[xADUser]User-svcSPSetup";
        UserName = "svcSPSetup";
        Ensure = "Present";
        Password = $MSFT_Credential14ref;
        DomainAdministratorCredential = $MSFT_Credential15ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_Credential as $MSFT_Credential16ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${SPFarmAccount}";
        };
        instance of MSFT_Credential as $MSFT_Credential17ref
        {
        Password = "ThisWillLoadAtRunTime";
        UserName = "${ADAdminSecretArn}";
        };
        instance of MSFT_xADUser as $MSFT_xADUser8ref
        {
        ResourceID = "[xADUser]User-svcSPFarm";
        UserName = "svcSPFarm";
        Ensure = "Present";
        Password = $MSFT_Credential16ref;
        DomainAdministratorCredential = $MSFT_Credential17ref;
        DomainName = "${DomainDNSName}";
        ModuleName = "xActiveDirectory";
        ModuleVersion = "2.25.0.0";
        DependsOn = {
            "[WindowsFeature]Feature-RSAT-AD-PowerShell"};
        ConfigurationName = "SharePointServer";
        };
        instance of MSFT_ScriptResource as $MSFT_ScriptResource2ref
        {
        ResourceID = "[Script]SignalCFN";
        GetScript = " return @{} ";
        TestScript = "\n                $value = Get-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -ErrorAction SilentlyContinue\n                if ($null -eq $value) { return $false }\n                if ($value.SignalSent -eq $true) { return $true }\n                return $false\n            ";
        SetScript = "\n                Start-Process -FilePath \"cfn-signal.exe\" -ArgumentList @(\"-s\", \"true\", (Get-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart).SignalUrl) -PassThru -Wait\n                New-Item -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -ErrorAction SilentlyContinue\n                Set-ItemProperty -Path HKLM:\\SOFTWARE\\Amazon\\QuickStart -Name SignalSent -Value $true\n            ";
        ModuleName = "PsDesiredStateConfiguration";
        ModuleVersion = "1.0";
        DependsOn = {
            "[Computer]DomainJoin"};
        ConfigurationName = "SharePointServer";
        };
        instance of OMI_ConfigurationDocument
        {
          Version="2.0.0";
          MinimumCompatibleVersion = "1.0.0";
          CompatibleVersionAdditionalProperties= {"Omi_BaseResource:ConfigurationName"};
          Name="SharePointServer";
        };

  SharePointServerDSCAssoication:
    Type: AWS::SSM::Association
    DependsOn:
     - WriteSingleServerMOF
    Properties: 
      AssociationName: SharePointSingleServer
      Name: AWS-ApplyDSCMofs
      Targets:
        - Key: InstanceIds
          Values: [ !Ref SharePointServer ]
      Parameters:
        MofsToApply: 
          - !Sub "s3:${DSCBucket}:SP-Single-${AWS::StackName}.mof"
        ServicePath:
          - default
        MofOperationMode:
          - Apply
        ComplianceType:
          - Custom:QSSPSingle
        ReportBucketName:
          - ""
        StatusBucketName:
          - ""
        ModuleSourceBucketName:
          - "NONE"
        AllowPSGalleryModuleSource:
          - "True"
        ProxyUri:
          - ""
        RebootBehavior:
          - "AfterMof"
        UseComputerNameForReporting:
          - "False"
        EnableVerboseLogging:
          - "False"
        EnableDebugLogging:
          - "False"
        PreRebootScript:
          - ""
      ScheduleExpression: cron(0/30 * * * ? *)
      OutputLocation:
        S3Location: 
          OutputS3BucketName: !Ref DSCBucket
          OutputS3KeyPrefix: 'logs/'

  SPSetupAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPSetup'
      Description: Account used to install SharePoint in the AWS SharePoint QuickStart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\svcSPSetup"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPFarmAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPFarm'
      Description: Account used as primary SharePoint farm account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\svcSPFarm"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPWebAppAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPWebApp'
      Description: Account used as primary SharePoint web app service account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: 
          Fn::Sub:
            - '{"username": "${domain}\\svcSPWebApp"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPSvcAppAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPSvcApp'
      Description: Account used as primary SharePoint service app service account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\svcSPSvcApp"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'
  
  SPCrawlAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPCrawl'
      Description: Account used as primary SharePoint search crawl account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: 
          Fn::Sub:
            - '{"username": "${domain}\\svcSPCrawl"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPUPSyncAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPUPSync'
      Description: Account used as primary SharePoint user profile sync account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\svcSPUPSync"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPSuperUserAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPSuperUser'
      Description: Account used as primary SharePoint super user account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate:
          Fn::Sub:
            - '{"username": "${domain}\\svcSPSuperUser"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPReaderAccount:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/SPReader'
      Description: Account used as primary SharePoint super user account in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: 
          Fn::Sub:
            - '{"username": "${domain}\\svcSPReader"}'
            - { domain: !Ref DomainNetBIOSName }
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  SPPassPhrase:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '/aws-quickstart-sharepoint/${AWS::StackName}/Passphrase'
      Description: Account used as farm passphrase in AWS SharePoint Quickstart
      GenerateSecretString:
        SecretStringTemplate: '{"username": "passphrase"}'
        GenerateStringKey: "password"
        PasswordLength: 15
        ExcludeCharacters: '"@/\'
